"use client"

import { useState, useEffect, useCallback, useRef } from "react"
import { socketManager } from "@/lib/socket"
import { MultiplayerFallback } from "@/lib/multiplayer-fallback"
import type { GameState, UserData, Player } from "@/lib/types"

interface PendingInvite {
  gameId: string
  from: Player
  betAmount: number
}

interface UseMultiplayerReturn {
  activeGame: GameState | null
  lobbyGames: GameState[]
  onlinePlayers: Player[]
  pendingInvite: PendingInvite | null
  isConnected: boolean
  createGame: (betAmount: number) => void
  joinGame: (gameId: string) => void
  makeMove: (index: number) => void
  invitePlayer: (userId: string, betAmount: number) => void
  acceptInvite: (gameId: string) => void
  declineInvite: (gameId: string) => void
  endGame: () => void
}

// –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∫–µ—Ç–∞
const DISABLE_SOCKET = true;

export function useMultiplayer(userData: UserData | null): UseMultiplayerReturn {
  const [activeGame, setActiveGame] = useState<GameState | null>(null)
  const [lobbyGames, setLobbyGames] = useState<GameState[]>([])
  const [onlinePlayers, setOnlinePlayers] = useState<Player[]>([])
  const [pendingInvite, setPendingInvite] = useState<PendingInvite | null>(null)
  const [isConnected, setIsConnected] = useState<boolean>(false)
  const [useFallback, setUseFallback] = useState<boolean>(false)
  const fallbackRef = useRef<MultiplayerFallback | null>(null)

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useRef –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–º—ã–∫–∞–Ω–∏—è–º–∏
  const userIdRef = useRef<string | null>(null)

  useEffect(() => {
    if (userData?.id) {
      userIdRef.current = userData.id
    }
  }, [userData])

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebSocket
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const isWebSocketAvailable = MultiplayerFallback.isWebSocketAvailable()
      setUseFallback(!isWebSocketAvailable)
      console.log(`WebSocket available: ${isWebSocketAvailable}, using fallback: ${!isWebSocketAvailable}`)
    }
  }, [])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log("üîß useMultiplayer effect triggered:", { DISABLE_SOCKET, userData: !!userData, useFallback })
    
    // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket
    if (DISABLE_SOCKET || !userData || useFallback) {
      console.log("üîß Skipping WebSocket connection, using fallback")
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fallback –µ—Å–ª–∏ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      if (useFallback && userData) {
        fallbackRef.current = new MultiplayerFallback()
        setIsConnected(true)
        console.log("‚úÖ Using multiplayer fallback system")
      } else if (DISABLE_SOCKET && userData) {
        // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        fallbackRef.current = new MultiplayerFallback()
        setIsConnected(true)
        console.log("‚úÖ Using multiplayer fallback system (sockets disabled)")
      }
      return;
    }
    
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∫–µ—Ç—É
      const socket = socketManager.getSocket()

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      socket.on("connect", () => {
        console.log("‚úÖ Socket connected in useMultiplayer")
        console.log("üîå Socket ID:", socket.id)
        setIsConnected(true)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        socket.emit("user:connect", {
          userId: userData.id,
          username: userData.username,
          avatar: userData.avatar,
        })
      })

      socket.on("disconnect", () => {
        console.log("Socket disconnected")
        setIsConnected(false)
      })

      socket.on("connect_error", (error) => {
        console.error("Socket connection error:", error)
        setIsConnected(false)
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ WebSocket –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback
        if (!fallbackRef.current) {
          fallbackRef.current = new MultiplayerFallback()
          setUseFallback(true)
          setIsConnected(true)
          console.log("üîÑ Switched to fallback due to WebSocket error")
        }
      })

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
      socket.on("game:update", (game: GameState) => {
        if (game.players.X.id === userData.id || game.players.O?.id === userData.id) {
          setActiveGame(game)
        }
      })

      socket.on("game:lobby", (games: GameState[]) => {
        setLobbyGames(games)
      })

      socket.on("players:online", (players: Player[]) => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–æ–∫–æ–≤
        setOnlinePlayers(players.filter((player) => player.id !== userData.id))
      })

      socket.on("game:invite", (invite: PendingInvite) => {
        setPendingInvite(invite)
      })

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∫–µ—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω
      if (!socket.connected && !DISABLE_SOCKET) {
        socket.connect()
      }

      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      return () => {
        socket.off("connect")
        socket.off("disconnect")
        socket.off("connect_error")
        socket.off("game:update")
        socket.off("game:lobby")
        socket.off("players:online")
        socket.off("game:invite")

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (socket.connected && userData.id) {
          socket.emit("user:disconnect", { userId: userData.id })
        }
      }
    } catch (error) {
      console.error("Error setting up socket:", error)
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback
      if (!fallbackRef.current) {
        fallbackRef.current = new MultiplayerFallback()
        setUseFallback(true)
        setIsConnected(true)
        console.log("üîÑ Switched to fallback due to initialization error")
      }
      return () => {}; // –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
    }
  }, [userData, useFallback])

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  useEffect(() => {
    if (useFallback && fallbackRef.current) {
      fallbackRef.current.onGameStateUpdate((gameState) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GameState –∏–∑ fallback –≤ –ø–æ–ª–Ω—ã–π GameState
        const fullGameState: GameState = {
          id: gameState.id,
          board: gameState.board,
          currentPlayer: gameState.currentPlayer,
          status: gameState.status,
          players: {
            X: gameState.players.X ? { ...gameState.players.X, avatar: null } : { id: '', username: '', avatar: null },
            O: gameState.players.O ? { ...gameState.players.O, avatar: null } : null
          },
          betAmount: 0, // –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ API
          pot: 0, // –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ API
          createdAt: new Date().toISOString(),
          winner: gameState.winner || null
        }
        setActiveGame(fullGameState)
      })
    }
  }, [useFallback])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  const createGame = useCallback(
    (betAmount: number) => {
      if (!userData) return

      console.log("üéÆ createGame called:", { betAmount, useFallback, DISABLE_SOCKET })

      if (useFallback) {
        // –í fallback —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ API
        console.log("Creating game via API fallback")
        fetch('/api/games', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId: userData.id, betAmount })
        }).then(response => response.json())
        .then(data => {
          if (data.success) {
            console.log("Game created via API fallback")
          }
        }).catch(error => {
          console.error("Error creating game via API:", error)
        })
      } else if (!DISABLE_SOCKET) {
        try {
          const socket = socketManager.getSocket()
          socket.emit("game:create", {
            userId: userData.id,
            betAmount,
          })
        } catch (error) {
          console.error("Error creating game:", error)
        }
      } else {
        console.log("üéÆ No fallback or socket available, cannot create game")
      }
    },
    [userData, useFallback],
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
  const joinGame = useCallback(
    (gameId: string) => {
      if (!userData) return

      if (useFallback && fallbackRef.current) {
        fallbackRef.current.joinGame(gameId, userData.id, userData.username)
      } else if (!DISABLE_SOCKET) {
        try {
          const socket = socketManager.getSocket()
          socket.emit("game:join", {
            userId: userData.id,
            gameId,
          })
        } catch (error) {
          console.error("Error joining game:", error)
        }
      }
    },
    [userData, useFallback],
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞
  const makeMove = useCallback(
    (index: number) => {
      if (!userData || !activeGame) return

      if (useFallback && fallbackRef.current) {
        fallbackRef.current.makeMove(activeGame.id, userData.id, index)
      } else if (!DISABLE_SOCKET) {
        try {
          const socket = socketManager.getSocket()
          socket.emit("game:move", {
            userId: userData.id,
            gameId: activeGame.id,
            index,
          })
        } catch (error) {
          console.error("Error making move:", error)
        }
      }
    },
    [userData, activeGame, useFallback],
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  const invitePlayer = useCallback(
    (userId: string, betAmount: number) => {
      if (!userData) return

      if (!DISABLE_SOCKET) {
        try {
          const socket = socketManager.getSocket()
          socket.emit("game:invite", {
            fromUserId: userData.id,
            toUserId: userId,
            betAmount,
          })
        } catch (error) {
          console.error("Error inviting player:", error)
        }
      }
    },
    [userData],
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  const acceptInvite = useCallback(
    (gameId: string) => {
      if (!userData) return

      if (!DISABLE_SOCKET) {
        try {
          const socket = socketManager.getSocket()
          socket.emit("game:accept-invite", {
            userId: userData.id,
            gameId,
          })

          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
          setPendingInvite(null)
        } catch (error) {
          console.error("Error accepting invite:", error)
        }
      }
    },
    [userData],
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  const declineInvite = useCallback(
    (gameId: string) => {
      if (!userData) return

      if (!DISABLE_SOCKET) {
        try {
          const socket = socketManager.getSocket()
          socket.emit("game:decline-invite", {
            userId: userData.id,
            gameId,
          })

          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
          setPendingInvite(null)
        } catch (error) {
          console.error("Error declining invite:", error)
        }
      }
    },
    [userData],
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  const endGame = useCallback(() => {
    if (!userData || !activeGame) return

    if (useFallback && fallbackRef.current) {
      fallbackRef.current.disconnect()
    } else if (!DISABLE_SOCKET) {
      try {
        const socket = socketManager.getSocket()
        socket.emit("game:end", {
          userId: userData.id,
          gameId: activeGame.id,
        })
      } catch (error) {
        console.error("Error ending game:", error)
      }
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
    setActiveGame(null)
  }, [userData, activeGame, useFallback])

  return {
    activeGame,
    lobbyGames,
    onlinePlayers,
    pendingInvite,
    isConnected,
    createGame,
    joinGame,
    makeMove,
    invitePlayer,
    acceptInvite,
    declineInvite,
    endGame,
  }
}
