"use client"

import { useState, useCallback, memo, useEffect } from "react"
import { Trophy, Clock, User, Users } from "lucide-react"
import { Button } from "@/components/ui/button"
import GameBoard from "@/components/game-board"
import HomeScreen from "@/components/home-screen"
import ProfileScreen from "@/components/profile-screen"
import LobbyScreen from "@/components/lobby-screen"
import LeaderboardScreen from "@/components/leaderboard-screen"
import WaitingScreen from "@/components/waiting-screen"
import GamePauseModal from "@/components/game-pause-modal"
import { useMultiplayer } from "@/hooks/use-multiplayer"
import type { GameState, UserData } from "@/lib/types"
import { getSupabaseClient } from "@/lib/supabase"
import { useToast } from "@/components/ui/use-toast"

interface UserInterfaceProps {
  userData: UserData | null
  setUserData: (userData: UserData) => void
  onAdminRequest: () => void
  onLogout: () => void
  onMainSiteRequest: () => void
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserBalance(userId: string, newBalance: number, gamesPlayed?: number, gamesWon?: number, totalWinnings?: number) {
  console.log(`Updating user data: userId=${userId}, newBalance=${newBalance}, gamesPlayed=${gamesPlayed}, gamesWon=${gamesWon}, totalWinnings=${totalWinnings}`);
  
  try {
    const response = await fetch(`/api/users/${userId}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        balance: newBalance,
        gamesPlayed,
        gamesWon,
        totalWinnings,
      }),
    });

    if (!response.ok) {
      throw new Error("Failed to update user data");
    }

    console.log(`Successfully updated user data for ${userId}`);
  } catch (error) {
    console.error("Error updating user data:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
async function refreshUserData(userId: string, setUserData: (user: UserData) => void) {
  try {
    const response = await fetch(`/api/users/${userId}`);
    if (response.ok) {
      const freshUser = await response.json();
      setUserData(freshUser);
      console.log(`Refreshed user data for ${userId}`);
    }
  } catch (error) {
    console.error("Error refreshing user data:", error);
  }
}

const UserInterface = memo(({ userData, setUserData, onAdminRequest, onLogout, onMainSiteRequest }: UserInterfaceProps) => {
  const [currentScreen, setCurrentScreen] = useState<"home" | "game" | "profile" | "lobby" | "leaderboard" | "waiting">("home")
  const [gameMode, setGameMode] = useState<"ai" | "multiplayer">("ai")
  const [waitingGameId, setWaitingGameId] = useState<string>("")
  const [waitingBetAmount, setWaitingBetAmount] = useState<number>(0)
  const [gameState, setGameState] = useState<GameState>(() => ({
    id: '',
    board: Array(9).fill(null),
    currentPlayer: 'X',
    players: { X: { id: '', username: '', avatar: null }, O: null },
    status: 'playing', // –ò–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ AI —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è
    betAmount: 0,
    pot: 0,
    winner: null,
    createdAt: ''
  }))
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isAITinking, setIsAIThinking] = useState<boolean>(false);
  const [lastMoveTime, setLastMoveTime] = useState<number>(0);
  const [isGamePaused, setIsGamePaused] = useState<boolean>(false);
  const [pauseData, setPauseData] = useState<any>(null);
  const [systemSettings, setSystemSettings] = useState({
    minBet: 1,
    maxBet: 100,
    botWinPercentage: 50 // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –±–æ—Ç–∞
  })
  const { toast } = useToast();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  useEffect(() => {
    const loadSystemSettings = async () => {
      try {
        const response = await fetch("/api/settings?type=system")
        if (response.ok) {
          const settings = await response.json()
          setSystemSettings({
            minBet: settings.minBet || 1,
            maxBet: settings.maxBet || 100,
            botWinPercentage: settings.botWinPercentage || 50 // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –±–æ—Ç–∞
          })
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error)
      }
    }

    loadSystemSettings()
  }, [])

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–≥—Ä—ã
  const {
    activeGame,
    lobbyGames,
    onlinePlayers,
    pendingInvite,
    isConnected,
    createGame,
    joinGame,
    makeMove,
    invitePlayer,
    acceptInvite,
    declineInvite,
    endGame: endMultiplayerGame,
  } = useMultiplayer(userData)

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
  const handleGameData = useCallback((game: any, betAmount: number) => {
    try {
      if (!userData) return;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–æ—Å–∫—É –∏–∑ JSON –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
      let parsedBoard = game.board;
      console.log("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö game.board:", typeof game.board, game.board);
      
      if (typeof game.board === 'string') {
        try {
          parsedBoard = JSON.parse(game.board);
          console.log("–î–æ—Å–∫–∞ –ø–æ—Å–ª–µ JSON.parse:", parsedBoard);
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–æ—Å–∫–∏:", e);
          parsedBoard = Array(9).fill(null);
        }
      }
      
      // –ï—Å–ª–∏ –¥–æ—Å–∫–∞ –≤—Å–µ –µ—â–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –¥–æ—Å–∫—É
      if (!Array.isArray(parsedBoard)) {
        console.error("–î–æ—Å–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", parsedBoard);
        parsedBoard = Array(9).fill(null);
      }
      
      console.log("–ò—Ç–æ–≥–æ–≤–∞—è –¥–æ—Å–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", parsedBoard);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      let players = game.players;
      let status = game.status || "waiting";
      
      // –î–æ–±–∞–≤–ª—è–µ–º AI –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!game.player_o || !game.players?.O) {
        players = {
          ...game.players,
          O: { id: "ai", username: "–ò–ò –û–ø–ø–æ–Ω–µ–Ω—Ç", avatar: null }
        };
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å —Å —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      if (game.status === "completed" || game.winner) {
        status = "completed";
      } else if (game.status === "draw") {
        status = "draw";
      } else if (game.status === "playing") {
        status = "playing";
      } else {
        status = "waiting";
      }
      
      console.log(`Setting game status: ${status}, winner: ${game.winner}`);
      console.log(`Game data from server: status=${game.status}, winner=${game.winner}`);
      console.log(`Current player from server: currentPlayer=${game.currentPlayer}, current_player=${game.current_player}`);
      
      const newGameState = {
        id: game.id,
        board: parsedBoard,
        currentPlayer: game.currentPlayer || game.current_player || "X",
        players,
        status,
        betAmount: game.bet_amount || betAmount,
        pot: game.pot || betAmount,
        winner: game.winner || null,
        createdAt: game.created_at || new Date().toISOString(),
      };
      
      console.log(`New game state:`, newGameState);
      
      try {
        setGameState(newGameState);
      } catch (error) {
        console.error("Error setting game state:", error)
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –∏–≥—Ä—ã
      setCurrentScreen("game");
      setIsLoading(false);
    } catch (error) {
      console.error("Error in handleGameData:", error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –∏–≥—Ä—ã
      setCurrentScreen("game");
      setIsLoading(false);
    }
  }, [userData]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∏–≥—Ä—ã —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
  const handleCreateMultiplayerGame = useCallback(
    async (betAmount: number) => {
      if (!userData) return

      console.log("üéÆ handleCreateMultiplayerGame called:", { betAmount, isConnected })

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
      // if (!isConnected) {
      //   alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞.")
      //   return
      // }

      try {
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ API
        const response = await fetch('/api/games/lobby', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            userId: userData.id,
            betAmount: betAmount
          })
        })

        if (response.ok) {
          const result = await response.json()
          console.log('‚úÖ Created multiplayer game:', result)
          console.log('üéÆ Game ID:', result.game.id)
          console.log('üéÆ Game status:', result.game.status)
          console.log('üí∞ Bet amount:', betAmount)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'waiting'
          if (result.game.status !== 'waiting') {
            console.error('‚ùå Game created with wrong status:', result.game.status)
            toast({
              title: "Error",
              description: "Game created with wrong status",
              variant: "destructive"
            })
            return
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è
          setIsLoading(true)
          console.log('‚è≥ Setting loading to true')
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è
          setWaitingGameId(result.game.id)
          setWaitingBetAmount(betAmount)
          setCurrentScreen("waiting")
          console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è...')
          console.log('üì± Current screen set to: waiting')
          console.log('üéÆ Waiting game ID set to:', result.game.id)
          console.log('üí∞ Waiting bet amount set to:', betAmount)
          
          // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
          setTimeout(() => {
            setIsLoading(false)
            console.log('‚úÖ Loading hidden, waiting screen should be visible')
          }, 300)
        } else {
          const errorData = await response.text()
          console.error('‚ùå Error response:', errorData)
          
          let errorMessage = "Failed to create game"
          try {
            const error = JSON.parse(errorData)
            errorMessage = error.error || errorMessage
          } catch (e) {
            console.error('‚ùå Error parsing error response:', e)
          }
          
          toast({
            title: "Error",
            description: errorMessage,
            variant: "destructive"
          })
        }
      } catch (error) {
        console.error('Error creating multiplayer game:', error)
        toast({
          title: "Error",
          description: "Failed to create game",
          variant: "destructive"
        })
      }
    },
    [userData, isConnected, toast],
  )

  // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞:
  const handleJoinGame = useCallback(
    async (gameId: string) => {
      if (!userData) return

      console.log("üîß handleJoinGame called with gameId:", gameId)
      console.log("üîß isConnected:", isConnected)

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
      // if (!isConnected) {
      //   alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
      //   return
      // }

      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ —á–µ—Ä–µ–∑ API
      try {
        console.log("üîß Joining game via API...")
        const joinResponse = await fetch(`/api/games/${gameId}/join`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            userId: userData.id,
            username: userData.username
          })
        })

        if (joinResponse.ok) {
          console.log("üîß Successfully joined game via API")
          
          // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
          console.log("üîß Loading game data via API...")
          const response = await fetch(`/api/games/${gameId}`)
          if (response.ok) {
            const gameData = await response.json()
            console.log("üîß Game data loaded:", gameData)
            
            // –ü–∞—Ä—Å–∏–º board –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            let board = gameData.board
            if (typeof board === 'string') {
              try {
                board = JSON.parse(board)
              } catch (error) {
                console.error("üîß Error parsing board:", error)
                board = Array(9).fill(null)
              }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            setGameState({
              id: gameData.id,
              board: board,
              currentPlayer: gameData.current_player || 'X',
              players: gameData.players || { X: null, O: null },
              status: gameData.status,
              betAmount: gameData.bet_amount,
              pot: gameData.pot || gameData.bet_amount * 2,
              winner: gameData.winner,
              createdAt: gameData.created_at,
            })
            
            console.log("üîß Setting current screen to game")
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ
            setCurrentScreen("game")
            return
          } else {
            console.error("üîß Failed to load game data:", response.status)
          }
        } else {
          console.error("üîß Failed to join game:", joinResponse.status)
        }
      } catch (error) {
        console.error("üîß Error joining game via API:", error)
      }

      // –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏ WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (isConnected) {
        console.log("üîß Using WebSocket fallback")
        joinGame(gameId)
      } else {
        console.error("üîß Neither API nor WebSocket worked")
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
      }
    },
    [userData, joinGame, isConnected],
  )

  const handleInvitePlayer = useCallback(
    (userId: string, betAmount: number) => {
      if (!userData) return

      if (!isConnected) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
      }

      invitePlayer(userId, betAmount)
    },
    [userData, invitePlayer, isConnected],
  )

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
  useEffect(() => {
    if (activeGame) {
      setGameState({
        id: activeGame.id,
        board: activeGame.board,
        currentPlayer: activeGame.currentPlayer,
        players: activeGame.players,
        status: activeGame.status,
        betAmount: activeGame.betAmount,
        pot: activeGame.pot,
        winner: activeGame.winner,
        createdAt: activeGame.createdAt,
      })
      setCurrentScreen("game")
    }
  }, [activeGame])

  // Polling –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    console.log("üîß Polling effect triggered:", { 
      currentScreen, 
      gameStateId: gameState.id 
    })
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º polling –µ—Å–ª–∏ –º—ã –≤ –∏–≥—Ä–µ, –µ—Å—Ç—å gameState.id –∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (currentScreen === "game" && gameState.id && gameState.status !== "completed" && gameState.status !== "draw") {
      console.log("üîß Starting polling for game:", gameState.id)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º polling, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å —Ö–æ–¥–∞–º–∏
      const initialDelay = setTimeout(() => {
        const interval = setInterval(async () => {
          try {
            console.log("üîß Polling game state...")
            const response = await fetch(`/api/games/${gameState.id}`)
            if (response.ok) {
              const gameData = await response.json()
              console.log("üîß Polled game data:", gameData)
              console.log("üîß Polled currentPlayer:", gameData.currentPlayer)
              console.log("üîß Polled current_player:", gameData.current_player)
              
              // –ü–∞—Ä—Å–∏–º board –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
              let board = gameData.board
              if (typeof board === 'string') {
                try {
                  board = JSON.parse(board)
                } catch (error) {
                  console.error("üîß Error parsing board in polling:", error)
                  board = Array(9).fill(null)
                }
              }
              
              // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
              const currentBoardString = JSON.stringify(gameState.board)
              const newBoardString = JSON.stringify(board)
              
                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Å–¥–µ–ª–∞–Ω —Ö–æ–¥ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã
            const timeSinceLastMove = Date.now() - lastMoveTime
            const shouldUpdate = timeSinceLastMove > 2000
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
            if (gameData.status === 'paused' && !isGamePaused) {
              console.log("üîß Game paused, showing pause modal")
              setIsGamePaused(true)
              setPauseData({
                gameId: gameData.id,
                inactivePlayers: gameData.inactive_players || []
              })
            } else if (gameData.status === 'playing' && isGamePaused) {
              console.log("üîß Game resumed, hiding pause modal")
              setIsGamePaused(false)
              setPauseData(null)
            }

            if ((newBoardString !== currentBoardString ||
                gameData.status !== gameState.status ||
                gameData.currentPlayer !== gameState.currentPlayer) && shouldUpdate) {
              
              console.log("üîß Game state changed, updating...")
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è
              setTimeout(() => {
                setGameState(prevState => ({
                  ...prevState,
                  id: gameData.id,
                  board: board,
                  currentPlayer: gameData.currentPlayer || gameData.current_player || 'X',
                  players: gameData.players || { X: null, O: null },
                  status: gameData.status,
                  betAmount: gameData.bet_amount,
                  pot: gameData.pot || gameData.bet_amount * 2,
                  winner: gameData.winner,
                  createdAt: gameData.created_at,
                }))
              }, 100)
            } else {
              console.log("üîß No changes in game state or recent move detected")
            }
            } else {
              console.error("üîß Polling failed:", response.status)
            }
          } catch (error) {
            console.error("üîß Error polling game state:", error)
          }
        }, 3000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        return () => {
          console.log("üîß Stopping polling")
          clearInterval(interval)
        }
      }, 2000) // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º polling

      return () => {
        clearTimeout(initialDelay)
      }
    }
  }, [currentScreen, gameState.id, gameState.status]) // –î–æ–±–∞–≤–∏–ª–∏ gameState.status –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º
  const handleCreateBotGame = useCallback(
    async (betAmount: number) => {
      if (!userData) {
        alert("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã");
        return;
      }

      if (!userData.id || userData.id.trim() === '') {
        console.error("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π");
        alert("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
        return;
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      console.log("–¢–∏–ø userData.id:", typeof userData.id);
      console.log("–ó–Ω–∞—á–µ–Ω–∏–µ userData.id:", userData.id);
      console.log("–î–ª–∏–Ω–∞ userData.id:", userData.id.length);
      console.log("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userData);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ UUID
      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
      if (!uuidRegex.test(userData.id)) {
        console.error("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É UUID:", userData.id);
        alert("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
        return;
      }

      try {
        console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —Å–æ —Å—Ç–∞–≤–∫–æ–π ${betAmount} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.id}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        setIsLoading(true);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
        const userId = String(userData.id).trim();
        if (!userId) {
          alert("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
          setIsLoading(false);
          return;
        }
        
        console.log("–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π userId –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", userId);
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ API
        const response = await fetch('/api/games', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            userId: userId, 
            betAmount: Number(betAmount) 
          }),
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
        let responseData;
        try {
          responseData = await response.json();
          console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", responseData);
        } catch (parseError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –æ—Ç–≤–µ—Ç–∞:", parseError);
          alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
          setIsLoading(false);
          return;
        }
        
        if (!response.ok) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:", responseData);
          let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
          
          if (responseData.error) {
            errorMessage = responseData.error;
            console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", responseData.details);
          }
          
          alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: ${errorMessage}`);
          setIsLoading(false);
          return;
        }

        console.log("–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:", responseData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–≥—Ä—ã –≤ –æ—Ç–≤–µ—Ç–µ
        if (responseData) {
          console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞:", responseData);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (userData?.id) {
            await refreshUserData(userData.id, setUserData);
          }
          
          // –°—Ä–∞–∑—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º AI –∫ –∏–≥—Ä–µ
          const joinResponse = await fetch(`/api/games/${responseData.id}/join-ai`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              userId: userData.id
            })
          });

          if (joinResponse.ok) {
            const joinResult = await joinResponse.json();
            console.log('‚úÖ AI joined the game:', joinResult);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã —Å AI
            if (joinResult.game) {
              handleGameData(joinResult.game, betAmount);
            } else {
              handleGameData(responseData, betAmount);
            }
          } else {
            console.error('‚ùå Failed to join AI to game');
            // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É
            handleGameData(responseData, betAmount);
          }
          
          return;
        } else {
          console.error("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ");
          alert("–û—à–∏–±–∫–∞: –ò–≥—Ä–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞");
          setIsLoading(false);
          return;
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        setIsLoading(false);
      }
    },
    [userData, setUserData, handleGameData],
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–≥—Ä–µ

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ö–æ–¥–∞ –≤ –∏–≥—Ä–µ —Å –±–æ—Ç–æ–º
  const handleBotGameMove = useCallback(
    async (index: number) => {
      if (!gameState || !userData) return

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞ –∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if (gameState.board[index] || gameState.status !== "playing") return

        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ö–æ–¥–æ–º –∏–≥—Ä–æ–∫–∞
        const newBoard = [...gameState.board]
        newBoard[index] = gameState.currentPlayer
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞
        setLastMoveTime(Date.now())
        
        try {
          setGameState(prev => ({
            ...prev,
            board: newBoard,
            currentPlayer: prev.currentPlayer === "X" ? "O" : "X"
          }))
        } catch (error) {
          console.error("Error updating game state:", error)
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–¥—É–º–∞—é—â–µ–≥–æ" AI
        setIsAIThinking(true)

        try {
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–¥—É–º–∞—é—â–µ–≥–æ" AI
          await new Promise(resolve => setTimeout(resolve, 800))
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          const response = await fetch(`/api/games/${gameState.id}/move`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ index, userId: userData.id })
          });

          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞:', response.status, errorData);
            setIsAIThinking(false);
            return;
          }

          const result = await response.json();
          console.log('Move response:', result);
          
          if (result.game) {
            console.log(`Game response: status=${result.game.status}, winner=${result.game.winner}`);
            
            try {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
              handleGameData(result.game, gameState.betAmount);
            } catch (error) {
              console.error("Error handling game data:", error)
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
            if (result.game.status === "completed" || result.game.status === "draw") {
              console.log(`Game ended with status: ${result.game.status}, winner: ${result.game.winner}`);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
              if (userData?.id) {
                try {
                  await refreshUserData(userData.id, setUserData);
                } catch (error) {
                  console.error("Error refreshing user data:", error)
                }
              }
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞:', error);
        } finally {
          setIsAIThinking(false);
        }
      } catch (error) {
        console.error('Error in handleBotGameMove:', error);
        setIsAIThinking(false);
      }
    },
    [gameState, userData, setUserData, handleGameData]
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ö–æ–¥–∞ –≤ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–≥—Ä–µ
  const handleMultiplayerMove = useCallback(
    async (index: number) => {
      if (!activeGame || !userData) return
      
      try {
        console.log(`Making move: index=${index}, userId=${userData.id}, gameId=${activeGame.id}`)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º
        const previousBalance = userData.balance;
        console.log(`Current balance before move: ${previousBalance}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∞ (X –∏–ª–∏ O)
        let playerSymbol = "X"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ X –≤ –∏–≥—Ä–∞—Ö –ø—Ä–æ—Ç–∏–≤ AI
        if (activeGame && activeGame.players) {
          playerSymbol = activeGame.players.X.id === userData.id ? "X" : "O";
        }
        console.log(`Player symbol: ${playerSymbol}`);
        
        // –î–µ–ª–∞–µ–º —Ö–æ–¥ —á–µ—Ä–µ–∑ API
        const response = await fetch(`/api/games/${activeGame.id}/move`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ index, userId: userData.id }),
        })
        
        if (!response.ok) {
          const err = await response.json()
          console.error("Move error:", err)
          alert(err.error || "–û—à–∏–±–∫–∞ —Ö–æ–¥–∞")
          return
        }
        
        const result = await response.json()
        console.log("Move result:", result)
        console.log("Game data:", result.game)
        console.log("Game status:", result.game.status)
        console.log("Game winner:", result.game.winner)
        console.log("Player symbol:", playerSymbol)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        if (result.game) {
          try {
            setGameState({
              id: result.game.id,
              board: result.game.board,
              currentPlayer: result.game.current_player,
              players: {
                X: {
                  id: result.game.player_x,
                  username: result.game.player_x_username || "Player X",
                  avatar: null,
                },
                O: result.game.player_o ? {
                  id: result.game.player_o,
                  username: result.game.player_o_username || "Player O",
                  avatar: null,
                } : null,
              },
              status: result.game.status,
              betAmount: result.game.bet_amount,
              pot: result.game.pot,
              winner: result.game.winner,
              createdAt: result.game.created_at,
            })
          } catch (error) {
            console.error("Error updating game state:", error)
          }
          
          // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
          console.log(`Checking loss condition: status=${result.game.status}, winner=${result.game.winner}, playerSymbol=${playerSymbol}`);
          if (result.game.status === "completed" && 
              result.game.winner && 
              result.game.winner !== playerSymbol) {
            console.log(`Game lost. Player symbol: ${playerSymbol}, Winner: ${result.game.winner}`);
            
            try {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
              const newGamesPlayed = userData.gamesPlayed + 1;
              
              console.log(`Updated user data in DB after loss`);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              setUserData({
                ...userData,
                gamesPlayed: newGamesPlayed
              });
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
              await updateUserBalance(
                userData.id, 
                userData.balance, 
                newGamesPlayed
              );
            } catch (error) {
              console.error("Error handling game loss:", error)
            }
            
            return;
          }
          
          // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª
          console.log(`Checking win condition: status=${result.game.status}, winner=${result.game.winner}, playerSymbol=${playerSymbol}`);
          if (result.game.status === "completed" && 
              result.game.winner && 
              result.game.winner === playerSymbol) {
            try {
              // –í—ã–∏–≥—Ä—ã—à - –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å –±–∞–Ω–∫ –∫ —Ç–µ–∫—É—â–µ–º—É –±–∞–ª–∞–Ω—Å—É
              const winnings = result.game.pot;
              const newBalance = previousBalance + winnings;
              const newGamesPlayed = userData.gamesPlayed + 1;
              const newGamesWon = userData.gamesWon + 1;
              const newTotalWinnings = (userData.totalWinnings || 0) + winnings;
              
              console.log(`Game won. Updating balance: ${previousBalance} + ${winnings} = ${newBalance}`);
              
              console.log(`Updated user data in DB after win`);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              setUserData({
                ...userData,
                balance: newBalance,
                gamesPlayed: newGamesPlayed,
                gamesWon: newGamesWon,
                totalWinnings: newTotalWinnings
              });
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
              await updateUserBalance(
                userData.id, 
                newBalance, 
                newGamesPlayed, 
                newGamesWon, 
                newTotalWinnings
              );
            } catch (error) {
              console.error("Error handling game win:", error)
            }
            
            return;
          }
          
          // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–Ω–∏—á—å—é
          console.log(`Checking draw condition: status=${result.game.status}`);
          if (result.game.status === "draw") {
            try {
              // –ù–∏—á—å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É
              const refund = result.game.bet_amount;
              const newBalance = previousBalance + refund;
              const newGamesPlayed = userData.gamesPlayed + 1;
              
              console.log(`Game draw. Updating balance: ${previousBalance} + ${refund} = ${newBalance}`);
              
              console.log(`Updated user data in DB after draw`);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              setUserData({
                ...userData,
                balance: newBalance,
                gamesPlayed: newGamesPlayed
              });
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
              await updateUserBalance(
                userData.id, 
                newBalance, 
                newGamesPlayed
              );
            } catch (error) {
              console.error("Error handling game draw:", error)
            }
            
            return;
          }
          
          console.log(`Game not completed or no win condition met. Status: ${result.game.status}, Winner: ${result.game.winner}`);
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ö–æ–¥–∞
        if (userData?.id) {
          console.log("Refreshing user data after move");
          try {
            await refreshUserData(userData.id, setUserData);
          } catch (error) {
            console.error("Error refreshing user data:", error)
          }
        }
      } catch (error) {
        console.error("Error making move:", error)
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞")
      }
    },
    [activeGame, userData, setUserData, systemSettings],
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  const handleEndGame = useCallback(() => {
    try {
      console.log("üéÆ Ending game...")
      
      if (activeGame) {
        try {
          endMultiplayerGame()
        } catch (error) {
          console.error("Error ending multiplayer game:", error)
        }
      }
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
      setGameState({
        id: '',
        board: Array(9).fill(null),
        currentPlayer: 'X',
        players: { X: { id: '', username: '', avatar: null }, O: null },
        status: 'waiting', // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ "waiting" –≤–º–µ—Å—Ç–æ "playing"
        betAmount: 0,
        pot: 0,
        winner: null,
        createdAt: ''
      })
      
      setCurrentScreen("home")
      
      // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      if (userData?.id) {
        console.log("Forcing user data refresh after game end")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const currentBalance = userData.balance;
        console.log(`Current balance before refresh: ${currentBalance}`);
        
        // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        updateUserBalance(userData.id, currentBalance).then(() => {
          console.log(`Balance successfully updated to ${currentBalance}`);
          // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ –±–∞–ª–∞–Ω—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        }).catch((error) => {
          console.error(`Failed to update balance, refreshing user data:`, error);
          try {
            refreshUserData(userData.id, setUserData);
          } catch (refreshError) {
            console.error("Error refreshing user data:", refreshError)
          }
        });
      }
    } catch (error) {
      console.error("Error in handleEndGame:", error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
      setCurrentScreen("home")
    }
  }, [activeGame, endMultiplayerGame, userData, setUserData])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  const handleDepositRequest = useCallback((amount: number) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API-–∑–∞–ø—Ä–æ—Å
    console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É ${amount}`)
  }, [])

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –≤ –∏–≥—Ä—É
  useEffect(() => {
    if (pendingInvite) {
      const handleInviteResponse = (accept: boolean) => {
        if (accept) {
          acceptInvite(pendingInvite.gameId)
        } else {
          declineInvite(pendingInvite.gameId)
        }
      }

      const confirmMessage = `${pendingInvite.from.username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å —Å—ã–≥—Ä–∞—Ç—å. –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ?`
      if (confirm(confirmMessage)) {
        handleInviteResponse(true)
      } else {
        handleInviteResponse(false)
      }
    }
  }, [pendingInvite, acceptInvite, declineInvite])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã (–∫–æ–≥–¥–∞ –ò–ò –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è)
  const handleGameStart = useCallback((gameData: any) => {
    console.log('üéÆ Game started with data:', gameData)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!gameData.id || !gameData.players) {
      console.error('‚ùå Invalid game data:', gameData)
      return
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∏–≥—Ä—É
    setIsLoading(true)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    const newGameState = {
      id: gameData.id,
      board: typeof gameData.board === 'string' ? JSON.parse(gameData.board) : (gameData.board || Array(9).fill(null)),
      currentPlayer: gameData.current_player || 'X',
      players: gameData.players,
      status: gameData.status || 'playing',
      betAmount: gameData.betAmount || gameData.bet_amount || 0,
      pot: gameData.pot || 0,
      winner: gameData.winner || null,
      createdAt: gameData.createdAt || gameData.created_at || new Date().toISOString()
    }
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:', newGameState)
    setGameState(newGameState)
    
    setGameMode("multiplayer")
    setCurrentScreen("game")
    console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –∏–≥—Ä—ã')
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    setTimeout(() => {
      setIsLoading(false)
    }, 500)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–∂–∏–¥–∞–Ω–∏—è
  const handleCancelWaiting = useCallback(() => {
    setWaitingGameId("")
    setWaitingBetAmount(0)
    setCurrentScreen("home")
  }, [])

  // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
  useEffect(() => {
    console.log('üîÑ Screen changed to:', currentScreen)
    if (userData?.id) {
      refreshUserData(userData.id, setUserData)
    }
    // eslint-disable-next-line
  }, [currentScreen])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const sendActivity = useCallback(async (gameId: string, playerSymbol: string) => {
    if (!userData?.id) return

    try {
      await fetch(`/api/games/${gameId}/activity`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: userData.id,
          playerSymbol
        })
      })
    } catch (error) {
      console.error('Error sending activity:', error)
    }
  }, [userData?.id])

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
  useEffect(() => {
    if (currentScreen === "game" && gameState?.id && userData?.id) {
      const playerSymbol = gameState.players.X.id === userData.id ? "X" : "O"
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É
      sendActivity(gameState.id, playerSymbol)
      
      // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      const interval = setInterval(() => {
        sendActivity(gameState.id, playerSymbol)
      }, 30000)

      return () => clearInterval(interval)
    }
  }, [currentScreen, gameState?.id, userData?.id, sendActivity])

  // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
  // useEffect(() => {
  //   if (!userData?.id) return;
    
  //   console.log("Setting up periodic user data refresh");
    
  //   // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  //   refreshUserData(userData.id, setUserData);
    
  //   // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã (—É–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
  //   const interval = setInterval(() => {
  //     console.log("Periodic user data refresh");
  //     refreshUserData(userData.id, setUserData);
  //   }, 3000);
    
  //   return () => {
  //     console.log("Clearing periodic user data refresh");
  //     clearInterval(interval);
  //   };
  // }, [userData?.id, setUserData]);

  return (
    <main className="flex min-h-screen flex-col bg-gradient-to-br from-indigo-50 to-blue-100 dark:from-gray-900 dark:to-gray-800">
      {isLoading && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-sm">
          <div className="rounded-xl bg-white p-8 shadow-xl dark:bg-gray-800 flex flex-col items-center">
            <div className="mb-4 animate-spin text-primary">
              <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="20" cy="20" r="18" stroke="#6366F1" strokeWidth="4" strokeDasharray="90 60" />
              </svg>
            </div>
            <div className="text-lg font-semibold text-gray-900 dark:text-white">Please wait...</div>
          </div>
        </div>
      )}
      {currentScreen === "home" && (
        <HomeScreen
          onCreateGame={handleCreateBotGame}
          onCreateMultiplayerGame={handleCreateMultiplayerGame}
          onNavigate={setCurrentScreen as (screen: "home" | "game" | "profile" | "lobby" | "leaderboard") => void}
          userData={userData}
          onAdminRequest={onAdminRequest}
          onMainSiteRequest={onMainSiteRequest}
        />
      )}

      {currentScreen === "waiting" && (
        <WaitingScreen
          gameId={waitingGameId}
          betAmount={waitingBetAmount}
          userData={userData}
          onGameStart={handleGameStart}
          onCancel={handleCancelWaiting}
        />
      )}

      {currentScreen === "game" && gameState && (
        gameState.status === "waiting" ? (
          <div className="flex flex-col items-center justify-center h-full">
            <div className="text-2xl font-bold mb-4">–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...</div>
            <div className="text-gray-500">–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è.</div>
          </div>
        ) : (
          <GameBoard
            gameState={gameState}
            onMakeMove={activeGame ? handleMultiplayerMove : handleBotGameMove}
            onEndGame={handleEndGame}
            userData={userData}
            isMultiplayer={!!activeGame}
            isAIThinking={isAITinking}
          />
        )
      )}

      {currentScreen === "profile" && userData && (
        <ProfileScreen
          userData={userData}
          onNavigate={(screen) => setCurrentScreen(screen as any)}
          onLogout={onLogout}
          setUserData={setUserData}
        />
      )}

      {currentScreen === "lobby" && (
        <LobbyScreen
          onJoinGame={handleJoinGame}
          onCreateGame={() => setCurrentScreen("home")}
          onBack={() => setCurrentScreen("home")}
          userData={userData}
        />
      )}

      {currentScreen === "leaderboard" && <LeaderboardScreen onNavigate={(screen) => setCurrentScreen(screen as any)} />}

      {/* Game Pause Modal */}
      {isGamePaused && pauseData && (
        <GamePauseModal
          gameId={pauseData.gameId}
          inactivePlayers={pauseData.inactivePlayers}
          onResume={() => {
            setIsGamePaused(false)
            setPauseData(null)
          }}
          onCancel={() => {
            setIsGamePaused(false)
            setPauseData(null)
            setCurrentScreen("home")
          }}
        />
      )}

      {/* Navigation Bar */}
      <nav className="fixed bottom-0 left-0 right-0 flex justify-around border-t border-gray-100 bg-white/80 p-3 shadow-lg backdrop-blur-lg dark:border-gray-800 dark:bg-gray-900/80">
        <Button
          variant="ghost"
          size="icon"
          onClick={() => setCurrentScreen("home")}
          className={currentScreen === "home" ? "text-primary" : "text-gray-400"}
        >
          <Trophy className="h-6 w-6" />
        </Button>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => setCurrentScreen("lobby")}
          className={currentScreen === "lobby" ? "text-primary" : "text-gray-400"}
        >
          <Users className="h-6 w-6" />
        </Button>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => setCurrentScreen("leaderboard")}
          className={currentScreen === "leaderboard" ? "text-primary" : "text-gray-400"}
        >
          <Clock className="h-6 w-6" />
        </Button>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => setCurrentScreen("profile")}
          className={currentScreen === "profile" ? "text-primary" : "text-gray-400"}
        >
          <User className="h-6 w-6" />
        </Button>
      </nav>
    </main>
  )
})

UserInterface.displayName = "UserInterface"

export default UserInterface

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function calculateWinner(board: (string | null)[]) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ]

  for (const [a, b, c] of lines) {
    if (board[a] && board[a] === board[b] && board[a] === board[c]) {
      return board[a]
    }
  }

  return null
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞ –¥–ª—è –±–æ—Ç–∞
function getBestMove(board: (string | null)[], player: string): number | null {
  const opponent = player === "X" ? "O" : "X"

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–æ–º
  for (let i = 0; i < board.length; i++) {
    if (board[i] === null) {
      const boardCopy = [...board]
      boardCopy[i] = player
      if (calculateWinner(boardCopy) === player) {
        return i
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–æ–º –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ
  for (let i = 0; i < board.length; i++) {
    if (board[i] === null) {
      const boardCopy = [...board]
      boardCopy[i] = opponent
      if (calculateWinner(boardCopy) === opponent) {
        return i
      }
    }
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω—è—Ç—å —Ü–µ–Ω—Ç—Ä
  if (board[4] === null) {
    return 4
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω—è—Ç—å —É–≥–ª—ã
  const corners = [0, 2, 6, 8]

  for (const corner of corners) {
    if (board[corner] === null) {
      return corner
    }
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, –¥–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
  for (let i = 0; i < board.length; i++) {
    if (board[i] === null) {
      return i
    }
  }

  return null
}

// –§—É–Ω–∫—Ü–∏–∏ handleGameData –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–¥–µ—Å—å - –æ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–Ω—É—Ç—Ä—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ UserInterface